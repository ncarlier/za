# Zer√ò Analytics configuration file
#
# If an attribute has a default value, this value is used if the attribute is not
# set or empty.
#
# Environment variables can be used anywhere in this config file, simply surround
# them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
# for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})

[log]
## Log level. Default is "info".
## Values: "debug", "info", "warn" or "error"
level = "${ZA_LOG_LEVEL}"
## Log format. Default is "json".
# Values: "json" or "text"
format = "${ZA_LOG_FORMAT}"
## Log modules.
# Values: "http" (for logging HTTP request)
modules = "${ZA_LOG_MODULES}"

[http]
## HTTP listen address. Default is ":8080".
## Examples: "localhost:8080" or ":8080" for all interfaces 
listen_addr = "${ZA_HTTP_LISTEN_ADDR}"

[geo-ip]
## GeoIP database location. GeoIP is disabled if not set.
## Example: "./var/dbip-country-lite.mmdb"
database = "${ZA_GEO_IP_DATABASE}"

[global]
## Global tags can be specified here in key="value" format.
#  [global.tags]
#    dc = "eu-west-1" # will tag all metrics with dc=us-east-1
#    ## Environment variables can be used as tags, and throughout the config file
#    user = "$USER"

## List of trackers
[[trackers]]
  ## Tracking ID
  tracking_id = "UA-XXXX-Y"
  ## Only HTTP request from this origin will be collected
  ## Supports '*' as wildcard. Ex: "*", "http://*.example.com", ...
  origin = "http://localhost:8000"
#  ## Badge configuration (<title>|<label>|<color>)
#  badge = "zero|analytics|#00a5da"
  ## Tracker usage limitation
  [trackers.rate_limiting]
    ## Rate limiting provider. Disabled if not set.
    ## Values: "memory" (no other providers for the moment)
    provider = "memory"
    ## Available tokens per interval
    tokens = 5
    ## Interval duration
    interval = "24h"

## List of outputs
## File output target
[[outputs.file]]
  ## Files to write to, "stdout" is a specially handled file.
  ## Example: "./out.json"
  files = ["stdout"]
  ## Data format to output.
  ## Values: "json" or "template"
  data_format = "json"
#  ## Go template used by the template data format. By defaut "Common Log Format".
#  data_format_template = "{{.client_ip}} {{.hostname}} - [{{.timestamp}}] \"GET {{.path}} {{.protocol}}\" 200 1 \"{{.referer}}\" \"{{.user_agent}}\""

# Loki output configuration
#[[outputs.loki]]
#  ## Loki ingestion URL
#  url = "http://localhost:3100"
#  ## Timeout.
#  timeout = "2s"
#  ## Batch size
#  batch_size = 10
#  ## Batch interval
#  batch_interval = "10s"
#  ## Data format to output.
#  ## Values: "json" or "template"
#  data_format = "json"

# HTTP output configuration
#[[outputs.http]]
#  ## URL address to send events to
#  url = "http://127.0.0.1:8080/"
#  ## Timeout for HTTP message
#  # timeout = "5s"
#  ## HTTP method, one of: "POST" or "PUT"
#  # method = "POST"
#  ## HTTP Basic Auth credentials
#  # username = "username"
#  # password = "pa$$word"
#  ## Compress body request using GZIP
#  # gzip = true
#  ## Data format to output.
#  ## Values: "json" or "template"
#  data_format = "json"

# Prometheus output configuration
#[[outputs.prom]]
#  ## Address to listen on
#  listen = ":9213"
#  ## Path to publish the metrics on.
#  # path = "/metrics"
#  ## Metric prefix name
#  # prefix = "za_"
#  [[outputs.prom.metrics]]
#    ## Metric name
#    name = "pageview_total"
#    ## Filter on specific event type
#    ## Values: "pageview", "exception" ("event" otherwise)
#    type = "pageview"
#    ## Kind of metric
#    ## Values: "counter" (no other kind for the moment)
#    kind = "counter"
#    ## Condition to produce metric
#    ## See syntax here: https://expr-lang.org/docs/language-definition
#    condition = 'tid == "UA-XXXX-Y"'
#    ## Metric labels can be specified here in key="value" format where value is the event property name.
#    [outputs.prom.metrics.labels]
#      tid = "TrackingID"
#      page = "DocumentPath"